<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!--    <bean id="accountDao" class="com.itheimaioc.dao.impl.AccountDaoImpl"></bean>-->


    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->

    <!--创建Bean的三种方式 -->
    <!-- 第一种方式：使用默认构造函数创建。
            在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。
            采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。

    <bean id="accountService" class="com.itheimaioc.service.impl.AccountServiceImpl"></bean>
    -->

    <!-- 第二种方式： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）
    <bean id="instanceFactory" class="com.itheimaioc.factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>
    -->

    <!-- 第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)
    <bean id="accountService" class="com.itheimaioc.factory.StaticFactory" factory-method="getAccountService"></bean>
    -->

    <!-- bean的作用范围调整
        bean标签的scope属性：
            作用：用于指定bean的作用范围
            取值： 常用的就是单例的和多例的
                singleton：单例的（默认值）
                prototype：多例的
                request：作用于web应用的请求范围
                session：作用于web应用的会话范围
                global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session

    <bean id="accountService" class="com.itheimaioc.service.impl.AccountServiceImpl" scope="prototype"></bean>
    -->

    <!-- bean对象的生命周期
            单例对象
                出生：当容器创建时对象出生
                活着：只要容器还在，对象一直活着
                死亡：容器销毁，对象消亡
                总结：单例对象的生命周期和容器相同
            多例对象
                出生：当我们使用对象时spring框架为我们创建
                活着：对象只要是在使用过程中就一直活着。
                死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收
     -->

    <!--    <bean id="accountService" class="com.itheimaioc.service.impl.AccountServiceImpl" scope="prototype"  init-method="init" destroy-method="destory"></bean>-->


    <!--    <bean id="accountService" class="com.itheimaioc.service.impl.AccountServiceImpl">-->

    <!--        <constructor-arg name="name" value="苔丝"></constructor-arg>-->
    <!--        <constructor-arg name="age" value="18"></constructor-arg>-->
    <!--        <constructor-arg name="birthday" ref="now"></constructor-arg>-->

    <!--    </bean>-->

    <!--    <bean id="now" class="java.util.Date"></bean>-->


    <!--    &lt;!&ndash;    set方法 基础类型&ndash;&gt;-->
    <!--    <bean id="accountService2" class="com.itheimaioc.service.impl.AccountServiceImp2">-->

    <!--        <property name="name" value="TEST"></property>-->
    <!--        <property name="age" value="21"></property>-->

    <!--        <property name="birthday" ref="now"></property>-->
    <!--    </bean>-->

    <!--    &lt;!&ndash;    复杂类型的set的方法&ndash;&gt;-->


    <!--    &lt;!&ndash;    复杂类型的set的方法&ndash;&gt;-->

    <!--    <bean id="accountService3" class="com.itheimaioc.service.impl.AccountServiceImp3">-->

    <!--        <property name="myStrs">-->

    <!--            <array>-->
    <!--                <value>AAA</value>-->
    <!--                <value>BBB</value>-->
    <!--                <value>CCC</value>-->

    <!--            </array>-->

    <!--        </property>-->


    <!--        <property name="myLists">-->

    <!--            <list>-->
    <!--                <value>AAA</value>-->
    <!--                <value>BBB</value>-->
    <!--                <value>CCC</value>-->

    <!--            </list>-->

    <!--        </property>-->


    <!--        <property name="mySet">-->

    <!--            <set>-->
    <!--                <value>AAA</value>-->
    <!--                <value>BBB</value>-->
    <!--                <value>CCC</value>-->

    <!--            </set>-->

    <!--        </property>-->


    <!--        <property name="myMap">-->


    <!--            <map>-->

    <!--                <entry key="testA" value="ABBAA"></entry>-->
    <!--                <entry key="testB">-->

    <!--                    <value>BBAAB</value>-->

    <!--                </entry>-->

    <!--            </map>-->


    <!--        </property>-->


    <!--        <property name="myProps">-->


    <!--            <props>-->

    <!--                <prop key="testC">testC</prop>-->

    <!--                <prop key="TestBBBB">testBBB</prop>-->

    <!--            </props>-->


    <!--        </property>-->

    <!--    </bean>-->


    <!--&lt;!&ndash;    案例ioc- xml配置->-->


    <bean id="accountService" class="com.itheimaioc.service.impl.AccountServiceImpl">

        <property name="accountDao" ref="accountDao">


        </property>

    </bean>

    <bean id="accountDao" class="com.itheimaioc.dao.impl.AccountDaoImpl">

        <property name="runner" ref="runner"></property>
    </bean>

    <bean id="runner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">

        <constructor-arg name="ds" ref="dataSource"></constructor-arg>

    </bean>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">

        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>

        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/eesy"></property>

        <property name="user" value="root"></property>

        <property name="password" value="111111"></property>

    </bean>



    <!--    <context:component-scan base-package="com.itheimaioc"></context:component-scan>-->


</beans>